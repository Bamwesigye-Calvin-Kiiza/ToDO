"""
Django settings for to_do_app project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import django_redis.cache


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATES_DIR = os.path.join(BASE_DIR,'templates')
STATIC_DIR = os.path.join(BASE_DIR,'static')
MEDIA_DIR = os.path.join(BASE_DIR,'media')
STATIC_ROOT =os.path.join(BASE_DIR, 'staticfiles')



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-g#q4=hsu^2mvked3gd!nx)5j@3au!nl_san-p2)1(2&n1^t-1i"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "ToDoApp",
    'django_celery_results',

]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "to_do_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            TEMPLATES_DIR,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "to_do_app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

PASSWORD_HASHERS =[
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',  
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',  
]

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        'OPTIONS':{'min_length':5}
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True
# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

CSRF_TRUSTED_ORIGINS = ['https://todo-production-df7e.up.railway.app','https://*.127.0.0.1','https://to-do-cwohr7x6qa-uc.a.run.app']


STATIC_URL = 'static/'
STATICFILES_DIRS = [
    STATIC_DIR,
]

# STATIC_ROOT =  "staticfiles/"
STATIC_ROOT = BASE_DIR / "staticfiles"


STORAGES = {
    
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

import redis

r = redis.Redis(
  host='redis-12301.c280.us-central1-2.gce.cloud.redislabs.com',
  port=12301,
  password='CN3MPqANvwvYTcXSyjtDATjtCJUScCnc')

# import pytz
# from datetime import datetime

# # Get the current time in UTC
# current_time = datetime.now()
import pytz
from datetime import datetime

# Get the current time in Nairobi timezone
nairobi_timezone = pytz.timezone('Africa/Nairobi')
current_time = datetime.now(nairobi_timezone)

# Convert the time to UTC before storing it in Redis
utc_timezone = pytz.timezone('UTC')
utc_time = current_time.astimezone(utc_timezone)

# Store the UTC time in Redis
redis.set('current_time', utc_time)


# # Convert the time to the Nairobi timezone
# nairobi_timezone = pytz.timezone('Africa/Nairobi')
# nairobi_time = current_time.astimezone(nairobi_timezone)

# # Store the Nairobi time in Redis
# redis.set('current_time', nairobi_time)


# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://:4d657562-a60a-437a-b797-22fadfb34435@10.32.78.195:6379/0',  # Replace HOST and PORT with your Redis instance details
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         },
#         'KEY_PREFIX': 'to_do',  # Set an appropriate cache key prefix
#     }
# }


# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# SESSION_CACHE_ALIAS = 'default'



# Celery Configuration
CELERY_BROKER_URL = 'redis://default:CN3MPqANvwvYTcXSyjtDATjtCJUScCnc@redis-12301.c280.us-central1-2.gce.cloud.redislabs.com:12301'
# CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Replace with your broker URL
# CELERY_BROKER_URL = 'redis://:4d657562-a60a-437a-b797-22fadfb34435@10.32.78.195:6379/0'
CELERY_RESULT_BACKEND = 'django-db'  # Optional: Use Django database as the result backend

# Celery Beat Configuration (for periodic tasks)
CELERY_BEAT_SCHEDULE = {
    'run_every_minute': {
        'task': 'ToDoApp.views.send_notification',  # Task function to run
        'schedule': 60.0,  # Run every 60 seconds (1 minute)
    },
}


# media 
MEDIA_URL = 'media/'
MEDIA_ROOT = MEDIA_DIR

LOGIN_URL = 'ToDoApp:login'
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
